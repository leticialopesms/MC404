recursive_tree_search:
    # a0: Pointer to root_node
    # a1: value
    li a7, 0            # a7 = counter = depth
    # --------------------------------- #
    # --- Storing ra value on stack --- #
    # --------------------------------- #
    addi sp, sp, -16    # Allocates the routine frame
    sw ra, 0(sp)        # Saves the return address

    # -------------------------------------- #
    # --- Loading the current node value --- #
    # -------------------------------------- #
    lw a2, 0(a0)        # a2 = VAL

    # ------------------------------ #
    # --- Checking if (n == VAL) --- #
    # ------------------------------ #
    beq a1, a2, found   # if a1 == a2 then found
    j left_node         # else check deeper

    # -------------------------- #
    # --- Checking left node --- #
    # -------------------------- #
    left_node:
        addi a0, a0, 4              # Updates pointer a0
        sw a0, 4(sp)                # Saves the pointer (a0) on the routine frame
        lw a0, 0(a0)                # Loads the address of the left node
        beqz a0, right_node         # if a0 == 0 then left_node == NULL
        jal recursive_tree_search   # Performs the recursive call
        beqz a7, right_node         # if a7 == 0 (not found yet) then right_node
        addi a7, a7, 1              # else (found) updates depth (a7)
        j end_tree_search

    # --------------------------- #
    # --- Checking right node --- #
    # --------------------------- #
    right_node:
        lw a0, 4(sp)                # Loads the previous pointer (a0)
        
        addi a0, a0, 4              # Updates pointer a0
        sw a0, 4(sp)                # Saves the pointer (a0) on the routine frame
        lw a0, 0(a0)                # Loads the address of the right node
        beqz a0, not_found          # if a0 == 0 then right_node == NULL
        jal recursive_tree_search   # Performs the recursive call
        beqz a7, not_found          # if a7 == 0 then not_found (in this branch)
        addi a7, a7, 1              # else (found) updates depth (a7)
        j end_tree_search

    end_tree_search:
        # a0 = function return = depth
        mv a0, a7   # Moves a7 to a0
        # ----------------------------------- #
        # --- Restoring ra value on stack --- #
        # ----------------------------------- #
        lw ra, 0(sp)
        addi sp, sp, 16
        ret
    not_found:
        j end_tree_search
    found:
        li a7, 1
        j end_tree_search